import telebot
from telebot import types
import openpyxl
from openpyxl import Workbook

TOKEN = 'You Token'
bot = telebot.TeleBot(TOKEN)

wb = Workbook()
ws = wb.active
ws.append(['Chat ID', '–í–æ–∑—Ä–∞—Å—Ç', '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ', '–ì–æ—Ä–æ–¥', '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä', '–ë—Ä–µ–Ω–¥', '–ü–æ–∑–∏—Ü–∏—è', '–û–ø—ã—Ç', '–û–∂–∏–¥–∞–Ω–∏—è',
           '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'])


def save_data_to_excel(user_data):
    ws.append([
        user_data.get('chat_id', ''),
        user_data.get('age', ''),
        user_data.get('citizenship', ''),
        user_data.get('city', ''),
        user_data.get('shopping_center', ''),
        user_data.get('brand', ''),
        user_data.get('vacancy', ''),
        user_data.get('experience', ''),
        user_data.get('money', ''),
        user_data.get('sched', ''),
        user_data.get('time', ''),
        user_data.get('phone_number', '')
    ])
    wb.save('user_data.xlsx')


user_data = {}

shopping_malls = {
    "–ú–æ—Å–∫–≤–∞": ["–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥", "–ê–≤–∏–∞–ø–∞—Ä–∫", "–í–µ–≥–∞—Å –ö—Ä–æ–∫—É—Å", "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π", "–ú–µ–≥–∞ –ë–µ–ª–∞—è –î–∞—á–∞",
               "–í–µ–≥–∞—Å –Ω–∞ –ö–∞—à–∏—Ä—Å–∫–æ–º", "–ö–æ–ª—É–º–±—É—Å", "–ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Å", "–ú–µ–≥–∞ –¢–µ–ø–ª—ã–π –°—Ç–∞–Ω", "–í–µ—Å–Ω–∞",
               "–†–∏–≤—å–µ—Ä–∞", "–û–∫–µ–∞–Ω–∏—è", "–°–∞–ª–∞—Ä–∏—Å", "–ï–≤—Ä–æ–ø–æ–ª–∏—Å", "–í–µ–≥–∞—Å –ö—É–Ω—Ü–µ–≤–æ", "–ú–µ–≥–∞ –•–∏–º–∫–∏"],
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": ["–ì–∞–ª–µ—Ä–µ—è", "–ú–µ–≥–∞", "–ê—É—Ä–∞"],
    "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫": ["–ü–ª–∞–Ω–µ—Ç–∞"],
    "–°–∞–º–∞—Ä–∞": ["–ö–æ—Å–º–æ–ø–æ—Ä—Ç", "–ú–µ–≥–∞"],
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": ["–ï–≤—Ä–æ–ø–æ–ª–∏—Å", "–ú–µ–≥–∞ –î—ã–±–µ–Ω–∫–æ", "–õ–µ—Ç–æ", "–ì–∞–ª–µ—Ä–µ—è", "–°–∏—Ç–∏ –ú–æ–ª–ª"],
    "–£—Ñ–∞": ["–ü–ª–∞–Ω–µ—Ç–∞", "–ú–µ–≥–∞"],
    "–¢—é–º–µ–Ω—å": ["–ö—Ä–∏—Å—Ç–∞–ª–ª"],
    "–°–º–æ–ª–µ–Ω—Å–∫": ["–ú–∞–∫—Å–∏"],
    "–ú—É—Ä–º–∞–Ω—Å–∫": ["–ú—É—Ä–º–∞–Ω—Å–∫ –ú–æ–ª–ª"],
    "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å": ["–Ø—Ä–º–∞—Ä–∫–∞"],
    "–ü–µ–Ω–∑–∞": ["–ö–æ–ª–ª–∞–∂"],
    "–°–æ—á–∏": ["–ú–æ—Ä–µ –ú–æ–ª–ª"],
    "–í–æ–ª–≥–æ–≥—Ä–∞–¥": ["–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π"],
    "–Ø—Ä–æ—Å–ª–∞–≤–ª—å": ["–ê—É—Ä–∞"],
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": ["–ê–ª–º–∞–∑", "–†–æ–¥–Ω–∏–∫"],
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": ["–ü–ª–∞–Ω–µ—Ç–∞"],
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": ["–ì—Ä–∏–Ω–≤–∏—á", "–ú–µ–≥–∞", "–í–µ–µ—Ä –ú–æ–ª–ª"],
    "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥": ["–ï–≤—Ä–æ–ø–∞"],
    "–ù.–ù–æ–≤–≥–æ—Ä–æ–¥": ["–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"],
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": ["–ì–∞–ª–µ—Ä–µ—è", "–†–µ–¥ –°–∫–≤–µ—Ä", "–û–ó –ú–æ–ª–ª", "–ú–µ–≥–∞ –ê–¥—ã–≥–µ—è"],
    "–û–º—Å–∫": ["–ú–µ–≥–∞"],
    "–¢–æ–ª—å—è—Ç—Ç–∏": ["–ü–∞—Ä–∫ –•–∞—É—Å"],
    "–ö–∞–∑–∞–Ω—å": ["–ü–∞—Ä–∫ –•–∞—É—Å", "–ú–µ–≥–∞"],
    "–í–ª–∞–¥–∏–º–∏—Ä": ["–ú–µ–≥–∞—Ç–æ—Ä–≥"],
    "–°—É—Ä–≥—É—Ç": ["–ê—É—Ä–∞"],
    "–°–∞—Ä–∞—Ç–æ–≤": ["–¢—Ä–∏—É–º—Ñ"],
    "–°–∞—Ä–∞–Ω—Å–∫": ["–°–∏—Ç–∏–ü–∞—Ä–∫"],
    "–ò—Ä–∫—É—Ç—Å–∫": ["–°–∏–ª—å–≤–µ—Ä –ú–æ–ª–ª"],
    "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã": ["–°–∞–Ω—Ä–∞–π–∑ –°–∏—Ç–∏"],
    "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å": ["–ö–æ—Å–º–æ—Å"],
    "–ë–∞—Ä–Ω–∞—É–ª": ["–ì–∞–ª–∞–∫—Ç–∏–∫–∞"],
    "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": ["–ö–∞–ª–∏–Ω–∞ –ú–æ–ª–ª"],
    "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫": ["–†–µ–¥ –°–∫–≤–µ—Ä"],
    "–•–∞–±–∞—Ä–æ–≤—Å–∫": ["–ë—Ä–æ—Å–∫–æ –ú–æ–ª–ª"],
    "–ü–µ—Ä–º—å": ["–ü–ª–∞–Ω–µ—Ç–∞"],
    "–ö–∏—Ä–æ–≤": ["–ú–∞–∫—Å–∏"]
}

brands = ["MAAG", "ECRU", "DUB", "VILET"]

schedule = ["–í –±—É–¥–Ω–∏–µ –∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ ", "–¢–æ–ª—å–∫–æ –±—É–¥–Ω–∏ ", "–¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ"]

vacancy = ["–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç - –∫–∞—Å—Å–∏—Ä", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–í–∏–∑—É–∞–ª—å–Ω—ã–π –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä",
           "–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞", "–î–∏—Ä–µ–∫—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞"]

working_time = ["–¢–æ–ª—å–∫–æ —É—Ç—Ä–æ–º", "–¢–æ–ª—å–∫–æ –≤–µ—á–µ—Ä–æ–º", "–í –ª—é–±–æ–µ –≤—Ä–µ–º—è"]


# Bot started
@bot.message_handler(commands=['start'])
def start(message):
    start_menu(message)


# First message
def start_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_start = types.KeyboardButton('–ù–∞—á–∞—Ç—å')
    markup.add(item_start)
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç " + message.from_user.first_name + "! \n–Ø —á–∞—Ç-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ RMixed (–ù–æ–≤–∞—è –ú–æ–¥–∞) –±—Ä–µ–Ω–¥—ã MAAG, ECRU, DUB, VILET. \n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º –≤–∞–∫–∞–Ω—Å–∏—è–º. \n\n –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—åüòâ",
                     reply_markup=markup)


# onPress Button "–ù–∞—á–∞—Ç—å" and get City list
@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å')
def send_city_selection(message):
    user_data[message.chat.id] = {'chat_id': message.chat.id}
    city_selection(message)


# function for City selection
def city_selection(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for city in sorted(shopping_malls.keys()):
        markup.add(types.KeyboardButton(city))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:", reply_markup=markup)
    bot.register_next_step_handler(msg, save_city_and_send_shopping_center_selection)


@bot.message_handler(func=lambda message: message.text in shopping_malls.keys())
def save_city_and_send_shopping_center_selection(message):
    if message.text == '–ù–∞–∑–∞–¥':
        start_menu(message)
    else:
        user_data[message.chat.id]['city'] = message.text
        shopping_center_selection(message, user_data[message.chat.id]['city'])


def shopping_center_selection(message, city):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for center in shopping_malls.get(city, []):
        markup.add(types.KeyboardButton(center))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä:", reply_markup=markup)
    bot.register_next_step_handler(msg, save_shopping_center_and_send_brand_selection)


# @bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('city') and message.text in shopping_malls.get(user_data[message.chat.id]['city'], []))
def save_shopping_center_and_send_brand_selection(message):
    if message.text == '–ù–∞–∑–∞–¥':
        del user_data[message.chat.id]['city']
        city_selection(message)
    else:
        user_data[message.chat.id]['shopping_center'] = message.text
        brand_selection(message)


def brand_selection(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for brand in brands:
        markup.add(types.KeyboardButton(brand))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –±—Ä–µ–Ω–¥:", reply_markup=markup)
    bot.register_next_step_handler(msg, save_brand_and_ask_for_age)


@bot.message_handler(func=lambda message: message.text in brands)
def save_brand_and_ask_for_age(message):
    if message.text == '–ù–∞–∑–∞–¥':
        del user_data[message.chat.id]['shopping_center']
        shopping_center_selection(message, user_data[message.chat.id]['city'])
    else:
        user_data[message.chat.id]['brand'] = message.text
        age_selection(message)


@bot.message_handler(func=lambda message: 'brand' in user_data.get(message.chat.id, {}))
def age_selection(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    age_buttons = ['18-25', '26-30', '31-35', '36-40', '41-45', '46-55', '—Å—Ç–∞—Ä—à–µ 55']
    for age in age_buttons:
        markup.add(types.KeyboardButton(age))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:', reply_markup=markup)
    bot.register_next_step_handler(msg, save_age_and_send_citizenship_selection)


@bot.message_handler(
    func=lambda message: message.text in ['18-25', '26-30', '31-35', '36-40', '41-45', '46-55', '—Å—Ç–∞—Ä—à–µ 55'])
def save_age_and_send_citizenship_selection(message):
    if message.text == '–ù–∞–∑–∞–¥':
        del user_data[message.chat.id]['brand']
        brand_selection(message)
    else:
        user_data[message.chat.id]['age'] = message.text
        citizenship_selection(message)


def citizenship_selection(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    countries = ['–†–æ—Å—Å–∏—è', '–ë–µ–ª–æ—Ä—É—Å—Å–∏—è', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì']
    for country in countries:
        markup.add(types.KeyboardButton(country))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:', reply_markup=markup)
    bot.register_next_step_handler(msg, save_citizenship_and_send_phone_input)


@bot.message_handler(func=lambda message: message.text in ['–†–æ—Å—Å–∏—è', '–ë–µ–ª–æ—Ä—É—Å—Å–∏—è', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì'])
def save_citizenship_and_send_phone_input(message):
    if message.text == '–ù–∞–∑–∞–¥':
        user_data[message.chat.id]['age'] = ""
        age_selection(message)
    else:
        user_data[message.chat.id]['citizenship'] = message.text
        phone_number_input(message)


def phone_number_input(message):
    markup = types.ReplyKeyboardRemove()
    msg = bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
    bot.register_next_step_handler(msg, save_phone_number)


def save_phone_number(message):
    user_data[message.chat.id]['phone_number'] = message.text
    vacancy_selection(message)


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('phone_number'))
def vacancy_selection(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for vacan in vacancy:
        markup.add(types.KeyboardButton(vacan))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
    bot.register_next_step_handler(msg, save_vacancy_and_confirm)


@bot.message_handler(func=lambda message: message.text in vacancy)
def save_vacancy_and_confirm(message):
    if message.text == '–ù–∞–∑–∞–¥':
        user_data[message.chat.id]['phone_number'] = ""
        user_data[message.chat.id]['citizenship'] = ""
        citizenship_selection(message)
    else:
        user_data[message.chat.id]['vacancy'] = message.text
        # bot.send_message(message.chat.id, message.text)
        confirm_vacancy(message)


def confirm_vacancy(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    # bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é:", reply_markup=markup)
    if user_data[message.chat.id]['vacancy'] == '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç - –∫–∞—Å—Å–∏—Ä':
        msg = bot.send_message(message.chat.id,
                               "–¢–µ–±—è –∂–¥—ë—Ç:\nüïùÔ∏è –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–≤–º–µ—â–∞—Ç—å —Å —É—á–µ–±–æ–π;\n‚úÖ–ü–æ–ª–Ω–∞—è –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å;\nüí≥Ô∏è –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ + –±–æ–Ω—É—Å –æ—Ç –ø—Ä–æ–¥–∞–∂;\nüí∏–ü—Ä–µ–º–∏—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞;\nüìà –ë—ã—Å—Ç—Ä—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç;\nüß•–î—Ä—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–≤–ª–µ—á–µ–Ω–Ω–∞—è –º–æ–¥–æ–π;\nüõçÔ∏è –°–∫–∏–¥–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ 25 % –Ω–∞ –≤—Å–µ –±—Ä–µ–Ω–¥—ã  –∏ —Å—Ç–∏–ª—å–Ω–∞—è —É–Ω–∏—Ñ–æ—Ä–º–∞;\n‚úÖ–°–∫–∏–¥–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤;\nüíù –î–ú–° –ø–æ—Å–ª–µ –≥–æ–¥–∞ –†–∞–±–æ—Ç—ã;\n‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ –¢–ö.\n\n–ß–µ–º –∑–∞–Ω–∏–º–∞—é—Ç—Å—è –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n\n‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø–æ–º–æ–≥–∞—é—Ç –≤ –≤—ã–±–æ—Ä–µ –º–æ–¥–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤;\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–æ—Ä—è–¥–∫–∞ –≤ –∑–∞–ª–µ;\n‚úÖ –†–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –ø—Ä–∏–º–µ—Ä–æ—á–Ω–æ–π, –≤ –∑–∞–ª–µ, –Ω–∞ –∫–∞—Å—Å–µ –∏ –Ω–∞ —Å–∫–ª–∞–¥–µ\n‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é—Ç –∏ —Ä–∞–∑–±–∏—Ä–∞—é—Ç –ø–æ—Å—Ç–∞–≤–∫–∏;\nüíØ –†–∞–±–æ—Ç–∞—é—Ç –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤, —Ä–∞–∑–≤–∏–≤–∞—è—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π üòä \n\n–ß—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞—á–∞—Ç—å!",
                               reply_markup=markup)
    else:
        msg = bot.send_message(message.chat.id,
                               "–û—Ç–ª–∏—á–Ω–æ!\n–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º :\nüí∏ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –∏ –±–æ–Ω—É—Å—ã –æ—Ç –ø—Ä–æ–¥–∞–∂ –∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–ª–∞–Ω–∞;\nüõçÔ∏è–°–∫–∏–¥–∫—É 25 % –Ω–∞ –≤—Å–µ –±—Ä–µ–Ω–¥—ã;\nüìù –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ –¢–ö;\nüöÄ –ë—ã—Å—Ç—Ä—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç;\nüåê –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—É—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É;\nüåü –ü—Ä–æ–≥—Ä–∞–º–º—ã –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∑–∞–±–æ—Ç—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ, –î–ú–°.\n\n–¢–≤–æ–∏ –±—É–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏:\n‚ú® –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø—Ä–æ–¥–∞–∂, –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π;\nüéØ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–±–æ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ;\nü§ù –ü–æ–¥–±–æ—Ä, –∞–¥–∞–ø—Ç–∞—Ü–∏—è, –æ–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–º–∞–Ω–¥—ã;\nüõçÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–µ—Ä—á–∞–Ω–¥–∞–π–∑–∏–Ω–≥–∞ –∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.\n–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—Ç —É—Å–ª–æ–≤–∏—è, –º—ã –∑–∞–¥–∞–¥–∏–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ üòâ",
                               reply_markup=markup)
    bot.register_next_step_handler(msg, continue_with_vacancy)


def continue_with_vacancy(message):
    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        confirm_vacancy_and_go_next(message)
    elif message.text == '–ù–∞–∑–∞–¥':
        del user_data[message.chat.id]['vacancy']
        vacancy_selection(message)


def confirm_vacancy_and_go_next(message):
    if user_data[message.chat.id]['vacancy'] == '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç - –∫–∞—Å—Å–∏—Ä':
        schedule_selection_consult(message)
    else:
        schedule_selection_manager(message)


def schedule_selection_consult(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for sched in schedule:
        markup.add(types.KeyboardButton(sched))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, "–ö–∞–∫—É—é –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Ç—ã –¥–ª—è —Å–µ–±—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å?", reply_markup=markup)
    bot.register_next_step_handler(msg, save_schedule)


def save_schedule(message):
    if message.text == '–ù–∞–∑–∞–¥':
        confirm_vacancy(message)
    else:
        user_data[message.chat.id]['sched'] = message.text
        get_working_time(message)


def get_working_time(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for time in working_time:
        markup.add(types.KeyboardButton(time))
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
    msg = bot.send_message(message.chat.id, "–í –∫–∞–∫—É—é –ø–æ–ª–æ–≤–∏–Ω—É –¥–Ω—è —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?", reply_markup=markup)
    bot.register_next_step_handler(msg, set_working_time)


def set_working_time(message):
    markup = types.ReplyKeyboardRemove()
    if message.text == '–ù–∞–∑–∞–¥':
        del user_data[message.chat.id]['sched']
        schedule_selection_consult(message)
    else:
        user_data[message.chat.id]['time'] = message.text
        save_data_to_excel(user_data[message.chat.id])
        bot.send_message(message.chat.id,
                         "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π üòä –ê –ø–æ–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–±–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Å –Ω–∞–º–∏:) –†–∞–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ https://disk.yandex.ru/i/kF7yXyLO_z2N4A –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã https://disk.yandex.ru/i/H2D9-DGNg6fGFw",
                         reply_markup=markup)


def schedule_selection_manager(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–î–∞'))
    markup.add(types.KeyboardButton('–ù–µ—Ç'))
    msg = bot.send_message(message.chat.id,
                           "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö, –≤ —Å—Ñ–µ—Ä–µ Fashion, –Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏?",
                           reply_markup=markup)
    bot.register_next_step_handler(msg, get_experience)


def get_experience(message):
    if message.text == '–ù–∞–∑–∞–¥':
        continue_with_vacancy(message)
    else:
        user_data[message.chat.id]['experience'] = message.text
        markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(message.chat.id,
                               "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è (—Å—É–º–º–∞ —Å–æ–≤–æ–∫—É–ø–Ω–æ –Ω–∞ —Ä—É–∫–∏)?\n–û—Ç–≤–µ—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ",
                               reply_markup=markup)
        bot.register_next_step_handler(msg, set_experience)


def set_experience(message):
    if message.text == '–ù–∞–∑–∞–¥':
        del user_data[message.chat.id]['experience']
        schedule_selection_manager(message)
    else:
        user_data[message.chat.id]['money'] = message.text
        save_data_to_excel(user_data[message.chat.id])
        bot.send_message(message.chat.id,
                         "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π üòä!\n–ê –ø–æ–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏ –ø—Ä–æ —Ä–∞–±–æ—Ç—É –Ω–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥!\n–†–∞–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ https://disk.yandex.ru/i/kF7yXyLO_z2N4A \n–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã https://disk.yandex.ru/i/H2D9-DGNg6fGFw")


# def save_phone_number(message):
#     user_data[message.chat.id]['phone_number'] = message.text
#     save_data_to_excel(user_data[message.chat.id])
#     bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π üòä \n–ê –ø–æ–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–±–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–æ–ª–∏–∫–∏ –ø—Ä–æ —Ä–∞–±–æ—Ç—É —Å –Ω–∞–º–∏:) \n–†–∞–±–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ \nhttps://disk.yandex.ru/i/kF7yXyLO_z2N4A \n–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã https://disk.yandex.ru/i/H2D9-DGNg6fGFw", reply_markup=types.ReplyKeyboardRemove())


# @bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def go_back(message):
    if 'brand' in user_data[message.chat.id]:
        del user_data[message.chat.id]['brand']
        brand_selection(message)
    elif 'schedule' in user_data[message.chat.id]:
        del user_data[message.chat.id]['schedule']
        shopping_center_selection(message, user_data[message.chat.id]['city'])
    elif 'shopping_center' in user_data[message.chat.id]:
        del user_data[message.chat.id]['shopping_center']
        shopping_center_selection(message, user_data[message.chat.id]['city'])
    elif 'city' in user_data[message.chat.id]:
        del user_data[message.chat.id]['city']
        city_selection(message)
    elif 'citizenship' in user_data[message.chat.id]:
        del user_data[message.chat.id]['citizenship']
        citizenship_selection(message)
    elif 'age' in user_data[message.chat.id]:
        del user_data[message.chat.id]['age']
        age_selection(message)
    else:
        start_menu(message)


bot.infinity_polling()
